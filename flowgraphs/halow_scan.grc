options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: Custom
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: halow_rx
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: ''
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 12.0]
    rotation: 0
    state: enabled

blocks:
- name: additional_window_size
  id: variable
  parameters:
    comment: 'original=16

      my logic was to scale this in proportion to the window size'
    value: '8'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [120, 148.0]
    rotation: 0
    state: enabled
- name: chan_est
  id: variable_qtgui_chooser
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    label0: ''
    label1: ''
    label2: ''
    label3: ''
    label4: ''
    labels: '["LS", "LMS", "Linear Comb", "STA"]'
    num_opts: '0'
    option0: '0'
    option1: '1'
    option2: '2'
    option3: '3'
    option4: '4'
    options: '[0, 1, 2, 3]'
    orient: Qt.QHBoxLayout
    type: int
    value: '0'
    widget: radio_buttons
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 12.0]
    rotation: 0
    state: enabled
- name: filter_cutoff
  id: variable
  parameters:
    comment: ''
    value: (samp_rate / 2) - (samp_rate /10)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1104, 28.0]
    rotation: 0
    state: enabled
- name: filter_transition
  id: variable
  parameters:
    comment: ''
    value: 10e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1216, 28.0]
    rotation: 0
    state: enabled
- name: freq
  id: variable_qtgui_chooser
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    label0: ''
    label1: ''
    label2: ''
    label3: ''
    label4: ''
    labels: '[''48 | 920.5 | 11ah'', ''159 | 921.0 | 11ah'', ''165 | 922.0 | 11ah'',
      ''1 | 2412.0 | 11g'', ''  2 | 2417.0 | 11g'', ''  3 | 2422.0 | 11g'', ''  4
      | 2427.0 | 11g'', ''  5 | 2432.0 | 11g'', ''  6 | 2437.0 | 11g'', ''  7 | 2442.0
      | 11g'', ''  8 | 2447.0 | 11g'', ''  9 | 2452.0 | 11g'', '' 10 | 2457.0 | 11g'',
      '' 11 | 2462.0 | 11g'', '' 12 | 2467.0 | 11g'', '' 13 | 2472.0 | 11g'', '' 14
      | 2484.0 | 11g'', '' 34 | 5170.0 | 11a'', '' 36 | 5180.0 | 11a'', '' 38 | 5190.0
      | 11a'', '' 40 | 5200.0 | 11a'', '' 42 | 5210.0 | 11a'', '' 44 | 5220.0 | 11a'',
      '' 46 | 5230.0 | 11a'', '' 48 | 5240.0 | 11a'', '' 50 | 5250.0 | 11a'', '' 52
      | 5260.0 | 11a'', '' 54 | 5270.0 | 11a'', '' 56 | 5280.0 | 11a'', '' 58 | 5290.0
      | 11a'', '' 60 | 5300.0 | 11a'', '' 62 | 5310.0 | 11a'', '' 64 | 5320.0 | 11a'',
      ''100 | 5500.0 | 11a'', ''102 | 5510.0 | 11a'', ''104 | 5520.0 | 11a'', ''106
      | 5530.0 | 11a'', ''108 | 5540.0 | 11a'', ''110 | 5550.0 | 11a'', ''112 | 5560.0
      | 11a'', ''114 | 5570.0 | 11a'', ''116 | 5580.0 | 11a'', ''118 | 5590.0 | 11a'',
      ''120 | 5600.0 | 11a'', ''122 | 5610.0 | 11a'', ''124 | 5620.0 | 11a'', ''126
      | 5630.0 | 11a'', ''128 | 5640.0 | 11a'', ''132 | 5660.0 | 11a'', ''134 | 5670.0
      | 11a'', ''136 | 5680.0 | 11a'', ''138 | 5690.0 | 11a'', ''140 | 5700.0 | 11a'',
      ''142 | 5710.0 | 11a'', ''144 | 5720.0 | 11a'', ''149 | 5745.0 | 11a (SRD)'',
      ''151 | 5755.0 | 11a (SRD)'', ''153 | 5765.0 | 11a (SRD)'', ''155 | 5775.0 |
      11a (SRD)'', ''157 | 5785.0 | 11a (SRD)'', ''159 | 5795.0 | 11a (SRD)'', ''161
      | 5805.0 | 11a (SRD)'', ''165 | 5825.0 | 11a (SRD)'', ''172 | 5860.0 | 11p'',
      ''174 | 5870.0 | 11p'', ''176 | 5880.0 | 11p'', ''178 | 5890.0 | 11p'', ''180
      | 5900.0 | 11p'', ''182 | 5910.0 | 11p'', ''184 | 5920.0 | 11p'']'
    num_opts: '0'
    option0: '0'
    option1: '1'
    option2: '2'
    option3: '3'
    option4: '4'
    options: '[920500000, 921000000, 922000000, 2412000000.0, 2417000000.0, 2422000000.0,
      2427000000.0, 2432000000.0, 2437000000.0, 2442000000.0, 2447000000.0, 2452000000.0,
      2457000000.0, 2462000000.0, 2467000000.0, 2472000000.0, 2484000000.0, 5170000000.0,
      5180000000.0, 5190000000.0, 5200000000.0, 5210000000.0, 5220000000.0, 5230000000.0,
      5240000000.0, 5250000000.0, 5260000000.0, 5270000000.0, 5280000000.0, 5290000000.0,
      5300000000.0, 5310000000.0, 5320000000.0, 5500000000.0, 5510000000.0, 5520000000.0,
      5530000000.0, 5540000000.0, 5550000000.0, 5560000000.0, 5570000000.0, 5580000000.0,
      5590000000.0, 5600000000.0, 5610000000.0, 5620000000.0, 5630000000.0, 5640000000.0,
      5660000000.0, 5670000000.0, 5680000000.0, 5690000000.0, 5700000000.0, 5710000000.0,
      5720000000.0, 5745000000.0, 5755000000.0, 5765000000.0, 5775000000.0, 5785000000.0,
      5795000000.0, 5805000000.0, 5825000000.0, 5860000000.0, 5870000000.0, 5880000000.0,
      5890000000.0, 5900000000.0, 5910000000.0, 5920000000.0]'
    orient: Qt.QVBoxLayout
    type: real
    value: 920.5e6
    widget: combo_box
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [608, 12.0]
    rotation: 0
    state: enabled
- name: gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '0.01'
    stop: '1'
    value: '0.75'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [472, 12.0]
    rotation: 0
    state: enabled
- name: halow_channel_json_filename
  id: variable
  parameters:
    comment: in seconds, 1mhz_mcs0 capture
    value: '''/home/dragon/Documents/gr-halow/flowgraphs/1mhz_halow_channels.json'''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 588.0]
    rotation: 0
    state: enabled
- name: input_samp_rate
  id: variable
  parameters:
    comment: ''
    value: 10e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [960, 36.0]
    rotation: 0
    state: enabled
- name: lo_offset
  id: variable_qtgui_chooser
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    label0: ''
    label1: ''
    label2: ''
    label3: ''
    label4: ''
    labels: '[]'
    num_opts: '3'
    option0: '0'
    option1: 6e6
    option2: 11e6
    option3: '3'
    option4: '4'
    options: '[0, 1, 2]'
    orient: Qt.QVBoxLayout
    type: real
    value: '0'
    widget: combo_box
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [176, 12.0]
    rotation: 0
    state: enabled
- name: lpf_taps
  id: variable
  parameters:
    comment: ''
    value: firdes.low_pass(1, input_samp_rate, filter_cutoff, filter_transition)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 124.0]
    rotation: 0
    state: enabled
- name: num_ofdm_subcarriers
  id: variable
  parameters:
    comment: aka num samples per ofdm symbol
    value: '32'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 224.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable_qtgui_chooser
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    label0: ''
    label1: ''
    label2: ''
    label3: ''
    label4: ''
    labels: '["1 MHz", "2 MHz", "4 MHz", "5 MHz", "10 MHz", "20 MHz"]'
    num_opts: '0'
    option0: '0'
    option1: '1'
    option2: '2'
    option3: '3'
    option4: '4'
    options: '[1e6, 2e6, 4e6, 5e6, 10e6, 20e6]'
    orient: Qt.QVBoxLayout
    type: real
    value: 1e6
    widget: combo_box
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [784, 12.0]
    rotation: 0
    state: enabled
- name: sdr_center_freq
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: ''
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '902000000'
    step: '100000'
    stop: '928000000'
    value: '918000000'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1360, 12.0]
    rotation: 0
    state: enabled
- name: start_time
  id: variable
  parameters:
    comment: in seconds, 1mhz_mcs0 capture
    value: '0.292'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 740.0]
    rotation: 0
    state: enabled
- name: stop_time
  id: variable
  parameters:
    comment: in seconds, 1mhz_mcs0 capture
    value: '0.31'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 828.0]
    rotation: 0
    state: enabled
- name: sync_length
  id: variable
  parameters:
    comment: ''
    value: '320'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 160.0]
    rotation: 0
    state: enabled
- name: window_size
  id: variable
  parameters:
    comment: original=48
    value: '24'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 84.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_0
  id: blocks_complex_to_mag
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1752, 328.0]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_squared_0
  id: blocks_complex_to_mag_squared
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1336, 128.0]
    rotation: 0
    state: enabled
- name: blocks_conjugate_cc_0
  id: blocks_conjugate_cc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1176, 480.0]
    rotation: 0
    state: enabled
- name: blocks_delay_0_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: 'old: 16

      is this one guard interval duration?'
    delay: additional_window_size
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    showports: 'False'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [976, 476.0]
    rotation: 0
    state: enabled
- name: blocks_delay_0_0_0
  id: blocks_delay
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    delay: '320'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_ports: '1'
    showports: 'False'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1328, 832.0]
    rotation: 0
    state: enabled
- name: blocks_divide_xx_0
  id: blocks_divide_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1976.0, 352]
    rotation: 270
    state: enabled
- name: blocks_file_sink_0
  id: blocks_file_sink
  parameters:
    affinity: ''
    alias: ''
    append: 'False'
    comment: ''
    file: /tmp/wifi.pcap
    type: byte
    unbuffered: 'True'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 900.0]
    rotation: 180
    state: disabled
- name: blocks_file_source_0
  id: blocks_file_source
  parameters:
    affinity: ''
    alias: ''
    begin_tag: pmt.PMT_NIL
    comment: ''
    file: /home/dragon/Documents/gr-halow/captures/halow-capture-1mhz-mcs0.sigmf-data
    length: int((stop_time - start_time) * input_samp_rate)
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: int(start_time * input_samp_rate)
    repeat: 'True'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [88, 532.0]
    rotation: 180
    state: disabled
- name: blocks_message_debug_0
  id: blocks_message_debug
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    en_uvec: 'True'
    log_level: trace
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792, 584.0]
    rotation: 0
    state: disabled
- name: blocks_moving_average_xx_0
  id: blocks_moving_average_xx
  parameters:
    affinity: ''
    alias: ''
    comment: 'old: 64

      number of total subcarriers?'
    length: window_size  + additional_window_size
    max_iter: '4000'
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    type: float
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1712, 172.0]
    rotation: 0
    state: enabled
- name: blocks_moving_average_xx_1
  id: blocks_moving_average_xx
  parameters:
    affinity: ''
    alias: ''
    comment: 'old: 48

      number of data subcarriers?'
    length: window_size
    max_iter: '4000'
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1504, 292.0]
    rotation: 0
    state: enabled
- name: blocks_multiply_xx_0
  id: blocks_multiply_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_inputs: '2'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1344, 320.0]
    rotation: 0
    state: enabled
- name: blocks_tag_gate_0
  id: blocks_tag_gate
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    propagate_tags: 'False'
    single_key: '""'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [600, 244.0]
    rotation: 0
    state: enabled
- name: blocks_throttle2_0
  id: blocks_throttle2
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    limit: auto
    maximum: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: input_samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [88, 452.0]
    rotation: 0
    state: disabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\nimport\
      \ json\nimport os\n\nclass blk(gr.sync_block):  \n\n\n    def __init__(self,\
      \ upper_detection_threshold=0.2, halow_channel_json_filename=\"\"): \n     \
      \   \"\"\"arguments to this function show up as parameters in GRC\"\"\"\n  \
      \      gr.sync_block.__init__(\n            self,\n            name='HaLow Usage\
      \ Detector',  \n            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n\
      \        )\n        self.upper_detection_threshold = upper_detection_threshold\n\
      \        self.halow_channel_json_filename = halow_channel_json_filename\n  \
      \      self.all_halow_channels = {}\n        if(os.path.isfile(halow_channel_json_filename)):\n\
      \            json_file = open(self.halow_channel_json_filename)\n          \
      \  self.all_halow_channels = json.load(json_file)\n            json_file.close()\n\
      \        self.port_freq_in = \"freq_in\"\n        self.message_port_register_in(pmt.intern(self.port_freq_in))\n\
      \        self.set_msg_handler(pmt.intern(self.port_freq_in), self.handle_freq_in)\n\
      \        self.port_tune_in = \"tune_in\"\n        self.message_port_register_in(pmt.intern(self.port_tune_in))\n\
      \        self.set_msg_handler(pmt.intern(self.port_tune_in), self.handle_tune_in)\n\
      \        self.tune_frequency = 0\n        self.offset_frequency = 0\n\n    def\
      \ handle_tune_in(self, msg):\n        key = pmt.intern(\"freq\")\n        value\
      \ = pmt.dict_ref(msg, key, pmt.PMT_NIL) \n        if(value is not pmt.PMT_NIL):\n\
      \            self.tune_frequency = pmt.to_double(value)\n    \n    def handle_freq_in(self,\
      \ msg):\n        key = pmt.intern(\"freq\")\n        value = pmt.dict_ref(msg,\
      \ key, pmt.PMT_NIL) \n        if(value is not pmt.PMT_NIL):\n            self.offset_frequency\
      \ = pmt.to_double(value)\n\n    def channel_lookup(self):\n        channel_frequency\
      \ = self.tune_frequency + self.offset_frequency\n        #print(f\"{self.tune_frequency}\
      \ {self.offset_frequency}\")\n        for channel, value in self.all_halow_channels.items():\n\
      \            if(value[\"freq\"] == channel_frequency):\n                return\
      \ (channel, value)\n        return (-1, -1)\n\n    def work(self, input_items,\
      \ output_items):\n        # this block does not operate on samples\n       \
      \ output_items[0][:] = input_items[0]\n\n        # find any identified wifi\
      \ frames and print out the current channel\n        \n        \n        \n \
      \       tags = self.get_tags_in_window(0, 0, len(input_items[0]))\n        channel\
      \ = self.channel_lookup()\n        for tag in tags:\n            key = pmt.to_python(tag.key)\n\
      \            value = pmt.to_python(tag.value)\n            #print(f\"{value}\
      \ {self.upper_detection_threshold} {channel[0]}\")\n            if(np.abs(value)\
      \ < self.upper_detection_threshold and channel[0] != -1):\n                tag_index\
      \ = tag.offset - self.nitems_read(0)\n                average = 0\n        \
      \        for i in range(tag_index, tag_index + 10):\n                    if(i\
      \ < len(input_items[0])):\n                        average += np.real(input_items[0][i])\n\
      \                #print(average/10)\n                if(average > self.upper_detection_threshold):\n\
      \                    channel_freq = channel[1][\"freq\"]/1e6\n             \
      \       channel_bw   = channel[1][\"bw\"]/1e6\n                    print(f\"\
      HaLow activity - channel {channel[0]}, freq {channel_freq} MHz, bw {channel_bw}\
      \ MHz - {value:.3f}\")\n\n        return len(output_items[0])\n"
    affinity: ''
    alias: ''
    comment: ''
    halow_channel_json_filename: halow_channel_json_filename
    maxoutbuf: '0'
    minoutbuf: '0'
    upper_detection_threshold: '0.1'
  states:
    _io_cache: ('HaLow Usage Detector', 'blk', [('upper_detection_threshold', '0.2'),
      ('halow_channel_json_filename', "''")], [('0', 'complex', 1), ('tune_in', 'message',
      1), ('freq_in', 'message', 1)], [('0', 'complex', 1)], 'arguments to this function
      show up as parameters in GRC', ['halow_channel_json_filename', 'upper_detection_threshold'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 720.0]
    rotation: 180
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nimport pmt\nimport\
      \ json\nimport os\n\nclass blk(gr.sync_block): \n    \"\"\"Embedded Python Block\
      \ example - a simple multiply const\"\"\"\n\n    def __init__(self, loiter_time=2,\
      \ sdr_center_freq=902e6, sdr_samp_rate=10e6, samp_rate=1e6, halow_channel_json_filename=\"\
      \"):\n        \"\"\"arguments to this function show up as parameters in GRC\"\
      \"\"\n        gr.sync_block.__init__(\n            self,\n            name='HaLow\
      \ Scan Controller', \n            in_sig=[np.complex64],\n            out_sig=[np.complex64]\n\
      \        )\n        self.halow_channel_json_filename = halow_channel_json_filename\n\
      \        self.all_halow_channels = {}\n        if(os.path.isfile(halow_channel_json_filename)):\n\
      \            json_file = open(self.halow_channel_json_filename)\n          \
      \  self.all_halow_channels = json.load(json_file)\n            json_file.close()\n\
      \        else:\n            print(\"incorrect file path!\")\n        self.sdr_center_freq\
      \ = sdr_center_freq\n        self.samp_rate = samp_rate\n        self.sdr_samp_rate\
      \ = sdr_samp_rate\n        self.port_freq_control = \"freq_control\"\n     \
      \   self.port_tuning_control = \"tuning_control\"\n        self.message_port_register_out(pmt.intern(self.port_freq_control))\n\
      \        self.message_port_register_out(pmt.intern(self.port_tuning_control))\n\
      \        self.available_halow_channels = []\n        self.channel_index = 0\n\
      \        self.loiter_samples = int(loiter_time * samp_rate) # how many samples\
      \ to read before switching channels\n        self.sample_count = 0\n       \
      \ self.freq_message = None\n        self.tune_message = None\n\n        # first\
      \ time setup operations\n        self.find_available_channels()\n        freq_offset\
      \ = 0 # initial offset of 0 unless there are available channels\n        if(len(self.available_halow_channels)\
      \ > 0):\n            freq_offset = self.available_halow_channels[self.channel_index][1][\"\
      freq\"] - self.sdr_center_freq\n        self.set_freq_message(freq_offset) #\
      \ initial offset of 0\n        self.set_tune_message(self.sdr_center_freq)\n\
      \        print(f\"{len(self.available_halow_channels)} available halow channels\
      \ in the current range\")\n\n    def find_available_channels(self):\n      \
      \  self.available_halow_channels = []\n        for channel, value in self.all_halow_channels.items():\n\
      \            channel_lowerbound = value[\"freq\"] - value[\"bw\"]/2\n      \
      \      channel_upperbound = value[\"freq\"] + value[\"bw\"]/2\n            radio_lowerbound\
      \ = self.sdr_center_freq - self.sdr_samp_rate / 2\n            radio_upperbound\
      \ = self.sdr_center_freq + self.sdr_samp_rate / 2\n            if(channel_lowerbound\
      \ >= radio_lowerbound and channel_upperbound <= radio_upperbound):\n       \
      \         self.available_halow_channels.append((channel, value))\n\n    def\
      \ find_next_tuning_freq(self):\n        radio_lowerbound = self.sdr_center_freq\
      \ - self.sdr_samp_rate / 2\n        radio_upperbound = self.sdr_center_freq\
      \ + self.sdr_samp_rate / 2\n        search_lowerbound = radio_upperbound - 4e6\
      \ # 4e6 because it is the maximum width of a HaLow channel that we care about\n\
      \        first_channel_miss = None # we will set the radio lowerbound so that\
      \ it captures the first missed channel\n        count = 0 # ensures we don't\
      \ have endless while loop\n        if(search_lowerbound < radio_lowerbound):\n\
      \            search_lowerbound = radio_lowerbound\n\n        # find first channel\
      \ miss\n        while(first_channel_miss is None):\n            for channel,\
      \ value in self.all_halow_channels.items():\n                # detect miss\n\
      \                right_of_search_lowerbound = value[\"freq\"] >= search_lowerbound\n\
      \                outside_current_range      = radio_upperbound < (value[\"freq\"\
      ] + value[\"bw\"]/2)\n                sdr_can_capture            = value[\"\
      bw\"] <= self.sdr_samp_rate\n                if(right_of_search_lowerbound and\
      \ outside_current_range and sdr_can_capture):\n                    # new lowest\
      \ miss\n                    if(first_channel_miss is None or value[\"freq\"\
      ] < first_channel_miss[1][\"freq\"]):\n                        first_channel_miss\
      \ = (channel, value)\n            # wraparound condition\n            if(first_channel_miss\
      \ is None and count < 1):\n                search_lowerbound = 902e6 # lowest\
      \ edge of ISM band\n                radio_upperbound = 901e6 # 1MHz lower than\
      \ lowest edge of ISM band\n                count = count + 1\n            elif(first_channel_miss\
      \ is None and count >= 1):\n                return self.sdr_center_freq\n  \
      \      \n        new_tuning_freq = (self.sdr_samp_rate / 2) + (first_channel_miss[1][\"\
      freq\"] - first_channel_miss[1][\"bw\"] / 2)\n        return new_tuning_freq\n\
      \n\n    def set_freq_message(self, freq_offset):\n        self.freq_message\
      \ = pmt.make_dict()\n        self.freq_message = pmt.dict_add(self.freq_message,\
      \ pmt.intern(\"freq\"), pmt.from_double(freq_offset))\n\n    def set_tune_message(self,\
      \ tuning_freq):\n        self.sdr_center_freq = tuning_freq\n        self.tune_message\
      \ = pmt.make_dict()\n        self.tune_message = pmt.dict_add(self.tune_message,\
      \ pmt.intern(\"freq\"), pmt.from_double(tuning_freq))\n        self.find_available_channels()\n\
      \n    def work(self, input_items, output_items):\n        # pass all samples\
      \ through; this block doesn't change samples, it just detects them for timing\n\
      \        output_items[0][:] = input_items[0]\n\n        # increment sample count\
      \ so we know how long we've stared at a channel before switching to the next\n\
      \        self.sample_count = self.sample_count + len(input_items[0])\n     \
      \   if(self.sample_count > self.loiter_samples):\n            self.sample_count\
      \ = 0\n            self.channel_index = self.channel_index + 1\n           \
      \ # check for rollover condition\n            if(self.channel_index >= len(self.available_halow_channels)):\n\
      \                self.channel_index = 0\n                next_tuning_freq =\
      \ self.find_next_tuning_freq()\n                print(f\"SDR frequency is {next_tuning_freq/1e6:.2f}\
      \ MHz\")\n                self.set_tune_message(next_tuning_freq)\n        \
      \    if(len(self.available_halow_channels) > 0):\n                print(f\"\
      current channel is {self.available_halow_channels[self.channel_index][0]} freq\
      \ {self.available_halow_channels[self.channel_index][1]['freq']/1e6:.2f} MHz,\
      \ bw {self.available_halow_channels[self.channel_index][1]['bw']/1e6:.2f} MHz\"\
      )\n                self.set_freq_message(self.available_halow_channels[self.channel_index][1][\"\
      freq\"] - self.sdr_center_freq)\n\n        # control FIR filter and tuner\n\
      \        self.message_port_pub(pmt.intern(self.port_freq_control), self.freq_message)\n\
      \        self.message_port_pub(pmt.intern(self.port_tuning_control), self.tune_message)\n\
      \        \n        # GRC expects this as a return value\n        return len(output_items[0])\n\
      \n"
    affinity: ''
    alias: ''
    comment: ''
    halow_channel_json_filename: halow_channel_json_filename
    loiter_time: '0.5'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    sdr_center_freq: sdr_center_freq
    sdr_samp_rate: input_samp_rate
  states:
    _io_cache: ('HaLow Scan Controller', 'blk', [('loiter_time', '2'), ('sdr_center_freq',
      '902000000.0'), ('sdr_samp_rate', '10000000.0'), ('samp_rate', '1000000.0'),
      ('halow_channel_json_filename', "''")], [('0', 'complex', 1)], [('0', 'complex',
      1), ('tuning_control', 'message', 1), ('freq_control', 'message', 1)], 'Embedded
      Python Block example - a simple multiply const', ['halow_channel_json_filename',
      'samp_rate', 'sdr_center_freq', 'sdr_samp_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [400, 388.0]
    rotation: 0
    state: enabled
- name: foo_wireshark_connector_0
  id: foo_wireshark_connector
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    debug: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    tech: '127'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [512, 908.0]
    rotation: 180
    state: disabled
- name: freq_xlating_fir_filter_xxx_0
  id: freq_xlating_fir_filter_xxx
  parameters:
    affinity: ''
    alias: ''
    center_freq: freq - sdr_center_freq
    comment: firdes.low_pass(gain, sample_rate, cutoff_freq, transition_freq)
    decim: int(input_samp_rate/samp_rate)
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: input_samp_rate
    taps: lpf_taps
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [344, 228.0]
    rotation: 0
    state: true
- name: ieee802_11_sync_long_0
  id: ieee802_11_sync_long
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    debug: 'False'
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    sync_length: '320'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1592, 812.0]
    rotation: 0
    state: enabled
- name: ieee802_11_sync_short_0
  id: ieee802_11_sync_short
  parameters:
    affinity: ''
    alias: ''
    comment: "plateau is a count of how many times the input \ncorrelation stream\
      \ is greater than the threshold.\nThe plateau count starts at 0 and when it\
      \ exceeds\nthe MIN_PLATEAU, it changes state from SEARCH to COPY"
    debug: 'False'
    log: 'False'
    maxoutbuf: '0'
    min_plateau: '2'
    minoutbuf: '0'
    threshold: '0.7'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1392.0, 616]
    rotation: 270
    state: enabled
- name: note_0
  id: note
  parameters:
    alias: ''
    comment: 'pretty certain all blocks above this one are essentially

      performing an autocorrelation?'
    note: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1376, 412.0]
    rotation: 0
    state: true
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: '1024'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1848, 356.0]
    rotation: 0
    state: disabled
- name: qtgui_time_sink_x_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: fixed period debug only
    ctrlpanel: 'True'
    entags: 'False'
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"autocorrelation"'
    nconnections: '1'
    size: (int((stop_time - start_time) * samp_rate) - 8) * 5
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1840, 548.0]
    rotation: 180
    state: enabled
- name: qtgui_time_sink_x_1_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: fixed period debug only
    ctrlpanel: 'True'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"post sync long"'
    nconnections: '1'
    size: '16500'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1008, 788.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_1_0_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: fixed period debug only
    ctrlpanel: 'True'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"post sync short"'
    nconnections: '1'
    size: '16500'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1608, 692.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_2
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: fixed period debug only
    ctrlpanel: 'True'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: Signal 1
    label10: Signal 10
    label2: Signal 2
    label3: Signal 3
    label4: Signal 4
    label5: Signal 5
    label6: Signal 6
    label7: Signal 7
    label8: Signal 8
    label9: Signal 9
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '"input signal"'
    nconnections: '1'
    size: int((stop_time - start_time) * samp_rate)
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '1'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1264, 196.0]
    rotation: 0
    state: enabled
- name: soapy_custom_source_0
  id: soapy_custom_source
  parameters:
    affinity: ''
    agc0: 'False'
    agc1: 'False'
    alias: ''
    antenna0: RX
    antenna1: ''
    bandwidth0: '0'
    bandwidth1: '0'
    center_freq0: sdr_center_freq
    center_freq1: '0'
    comment: ''
    dc_offset0: '0'
    dc_offset1: '0'
    dc_removal0: 'False'
    dc_removal1: 'True'
    dev_args: ''
    driver: airspy
    freq_correction0: '0'
    freq_correction1: '0'
    gain0: '10'
    gain1: '0'
    iq_balance0: '0'
    iq_balance1: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    samp_rate: input_samp_rate
    settings0: ''
    settings1: ''
    stream_args: ''
    tune_args0: ''
    tune_args1: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [72, 348.0]
    rotation: 0
    state: enabled

connections:
- [blocks_complex_to_mag_0, '0', blocks_divide_xx_0, '0']
- [blocks_complex_to_mag_squared_0, '0', blocks_moving_average_xx_0, '0']
- [blocks_conjugate_cc_0, '0', blocks_multiply_xx_0, '1']
- [blocks_delay_0_0, '0', blocks_conjugate_cc_0, '0']
- [blocks_delay_0_0, '0', ieee802_11_sync_short_0, '0']
- [blocks_delay_0_0_0, '0', ieee802_11_sync_long_0, '1']
- [blocks_divide_xx_0, '0', ieee802_11_sync_short_0, '2']
- [blocks_divide_xx_0, '0', qtgui_time_sink_x_0, '0']
- [blocks_divide_xx_0, '0', qtgui_time_sink_x_0_0, '0']
- [blocks_file_source_0, '0', blocks_throttle2_0, '0']
- [blocks_moving_average_xx_0, '0', blocks_divide_xx_0, '1']
- [blocks_moving_average_xx_1, '0', blocks_complex_to_mag_0, '0']
- [blocks_moving_average_xx_1, '0', ieee802_11_sync_short_0, '1']
- [blocks_multiply_xx_0, '0', blocks_moving_average_xx_1, '0']
- [blocks_tag_gate_0, '0', epy_block_1, '0']
- [blocks_throttle2_0, '0', freq_xlating_fir_filter_xxx_0, '0']
- [epy_block_0, '0', qtgui_time_sink_x_1_0, '0']
- [epy_block_1, '0', blocks_complex_to_mag_squared_0, '0']
- [epy_block_1, '0', blocks_delay_0_0, '0']
- [epy_block_1, '0', blocks_multiply_xx_0, '0']
- [epy_block_1, '0', qtgui_time_sink_x_2, '0']
- [epy_block_1, freq_control, epy_block_0, freq_in]
- [epy_block_1, freq_control, freq_xlating_fir_filter_xxx_0, freq]
- [epy_block_1, tuning_control, blocks_message_debug_0, print]
- [epy_block_1, tuning_control, epy_block_0, tune_in]
- [epy_block_1, tuning_control, soapy_custom_source_0, cmd]
- [foo_wireshark_connector_0, '0', blocks_file_sink_0, '0']
- [freq_xlating_fir_filter_xxx_0, '0', blocks_tag_gate_0, '0']
- [ieee802_11_sync_long_0, '0', epy_block_0, '0']
- [ieee802_11_sync_short_0, '0', blocks_delay_0_0_0, '0']
- [ieee802_11_sync_short_0, '0', ieee802_11_sync_long_0, '0']
- [ieee802_11_sync_short_0, '0', qtgui_time_sink_x_1_0_0, '0']
- [soapy_custom_source_0, '0', freq_xlating_fir_filter_xxx_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.10.0
